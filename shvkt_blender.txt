import bpy
import os
import subprocess
import urllib.request

# Dictionnaire des noms des bones à renommer
bones_rename_dict = {
    "Bip001-Pelvis": "ValveBiped.Bip01_Pelvis",
    "Bip001-Spine": "ValveBiped.Bip01_Spine",
    "Bip001-Spine1": "ValveBiped.Bip01_Spine1",
    "Bip001-Spine2": "ValveBiped.Bip01_Spine2",
    "Bip001-Spine4": "ValveBiped.Bip01_Spine4",
    "Bip001-Neck1": "ValveBiped.Bip01_Neck1",
    "Bip001-Head1": "ValveBiped.Bip01_Head1",
    "Bip001-R-Clavicle": "ValveBiped.Bip01_R_Clavicle",
    "Bip001-R-UpperArm": "ValveBiped.Bip01_R_UpperArm",
    "Bip001-R-Forearm": "ValveBiped.Bip01_R_Forearm",
    "Bip001-R-Hand": "ValveBiped.Bip01_R_Hand",
    "Bip001-R-Finger0": "ValveBiped.Bip01_R_Finger0",
    "Bip001-R-Finger01": "ValveBiped.Bip01_R_Finger01",
    "Bip001-R-Finger02": "ValveBiped.Bip01_R_Finger02",
    "Bip001-R-Finger11": "ValveBiped.Bip01_R_Finger1",
    "Bip001-R-Finger12": "ValveBiped.Bip01_R_Finger11",
    "Bip001-R-Finger13": "ValveBiped.Bip01_R_Finger12",
    "Bip001-R-Finger21": "ValveBiped.Bip01_R_Finger2",
    "Bip001-R-Finger22": "ValveBiped.Bip01_R_Finger21",
    "Bip001-R-Finger23": "ValveBiped.Bip01_R_Finger22",
    "Bip001-R-Finger31": "ValveBiped.Bip01_R_Finger3",
    "Bip001-R-Finger32": "ValveBiped.Bip01_R_Finger31",
    "Bip001-R-Finger33": "ValveBiped.Bip01_R_Finger32",
    "Bip001-R-Finger41": "ValveBiped.Bip01_R_Finger4",
    "Bip001-R-Finger42": "ValveBiped.Bip01_R_Finger41",
    "Bip001-R-Finger43": "ValveBiped.Bip01_R_Finger42",
    "Bip001-L-Clavicle": "ValveBiped.Bip01_L_Clavicle",
    "Bip001-L-UpperArm": "ValveBiped.Bip01_L_UpperArm",
    "Bip001-L-Forearm": "ValveBiped.Bip01_L_Forearm",
    "Bip001-L-Hand": "ValveBiped.Bip01_L_Hand",
    "Bip001-L-Finger0": "ValveBiped.Bip01_L_Finger0",
    "Bip001-L-Finger01": "ValveBiped.Bip01_L_Finger01",
    "Bip001-L-Finger02": "ValveBiped.Bip01_L_Finger02",
    "Bip001-L-Finger11": "ValveBiped.Bip01_L_Finger1",
    "Bip001-L-Finger12": "ValveBiped.Bip01_L_Finger11",
    "Bip001-L-Finger13": "ValveBiped.Bip01_L_Finger12",
    "Bip001-L-Finger21": "ValveBiped.Bip01_L_Finger2",
    "Bip001-L-Finger22": "ValveBiped.Bip01_L_Finger21",
    "Bip001-L-Finger23": "ValveBiped.Bip01_L_Finger22",
    "Bip001-L-Finger31": "ValveBiped.Bip01_L_Finger3",
    "Bip001-L-Finger32": "ValveBiped.Bip01_L_Finger31",
    "Bip001-L-Finger33": "ValveBiped.Bip01_L_Finger32",
    "Bip001-L-Finger41": "ValveBiped.Bip01_L_Finger4",
    "Bip001-L-Finger42": "ValveBiped.Bip01_L_Finger41",
    "Bip001-L-Finger43": "ValveBiped.Bip01_L_Finger42",
    "Bip001-R-Thigh": "ValveBiped.Bip01_R_Thigh",
    "Bip001-R-Calf": "ValveBiped.Bip01_R_Calf",
    "Bip001-R-Foot": "ValveBiped.Bip01_R_Foot",
    "Bip001-R-Toe0": "ValveBiped.Bip01_R_Toe0",
    "Bip001-L-Thigh": "ValveBiped.Bip01_L_Thigh",
    "Bip001-L-Calf": "ValveBiped.Bip01_L_Calf",
    "Bip001-L-Foot": "ValveBiped.Bip01_L_Foot",
    "Bip001-L-Toe0": "ValveBiped.Bip01_L_Toe0",
}

bones_rename_dict2 = {
    "Bip001 Pelvis": "ValveBiped.Bip01_Pelvis",
    "Bip001 Spine": "ValveBiped.Bip01_Spine",
    "Bip001 Spine1": "ValveBiped.Bip01_Spine1",
    "Bip001 Spine2": "ValveBiped.Bip01_Spine2",
    "Bip001 Spine4": "ValveBiped.Bip01_Spine4",
    "Bip001 Neck1": "ValveBiped.Bip01_Neck1",
    "Bip001 Head1": "ValveBiped.Bip01_Head1",
    "Bip001 R Clavicle": "ValveBiped.Bip01_R_Clavicle",
    "Bip001 R UpperArm": "ValveBiped.Bip01_R_UpperArm",
    "Bip001 R Forearm": "ValveBiped.Bip01_R_Forearm",
    "Bip001 R Hand": "ValveBiped.Bip01_R_Hand",
    "Bip001 R Finger0": "ValveBiped.Bip01_R_Finger0",
    "Bip001 R Finger01": "ValveBiped.Bip01_R_Finger01",
    "Bip001 R Finger02": "ValveBiped.Bip01_R_Finger02",
    "Bip001 R Finger11": "ValveBiped.Bip01_R_Finger1",
    "Bip001 R Finger12": "ValveBiped.Bip01_R_Finger11",
    "Bip001 R Finger13": "ValveBiped.Bip01_R_Finger12",
    "Bip001 R Finger21": "ValveBiped.Bip01_R_Finger2",
    "Bip001 R Finger22": "ValveBiped.Bip01_R_Finger21",
    "Bip001 R Finger23": "ValveBiped.Bip01_R_Finger22",
    "Bip001 R Finger31": "ValveBiped.Bip01_R_Finger3",
    "Bip001 R Finger32": "ValveBiped.Bip01_R_Finger31",
    "Bip001 R Finger33": "ValveBiped.Bip01_R_Finger32",
    "Bip001 R Finger41": "ValveBiped.Bip01_R_Finger4",
    "Bip001 R Finger42": "ValveBiped.Bip01_R_Finger41",
    "Bip001 R Finger43": "ValveBiped.Bip01_R_Finger42",
    "Bip001 L Clavicle": "ValveBiped.Bip01_L_Clavicle",
    "Bip001 L UpperArm": "ValveBiped.Bip01_L_UpperArm",
    "Bip001 L Forearm": "ValveBiped.Bip01_L_Forearm",
    "Bip001 L Hand": "ValveBiped.Bip01_L_Hand",
    "Bip001 L Finger0": "ValveBiped.Bip01_L_Finger0",
    "Bip001 L Finger01": "ValveBiped.Bip01_L_Finger01",
    "Bip001 L Finger02": "ValveBiped.Bip01_L_Finger02",
    "Bip001 L Finger11": "ValveBiped.Bip01_L_Finger1",
    "Bip001 L Finger12": "ValveBiped.Bip01_L_Finger11",
    "Bip001 L Finger13": "ValveBiped.Bip01_L_Finger12",
    "Bip001 L Finger21": "ValveBiped.Bip01_L_Finger2",
    "Bip001 L Finger22": "ValveBiped.Bip01_L_Finger21",
    "Bip001 L Finger23": "ValveBiped.Bip01_L_Finger22",
    "Bip001 L Finger31": "ValveBiped.Bip01_L_Finger3",
    "Bip001 L Finger32": "ValveBiped.Bip01_L_Finger31",
    "Bip001 L Finger33": "ValveBiped.Bip01_L_Finger32",
    "Bip001 L Finger41": "ValveBiped.Bip01_L_Finger4",
    "Bip001 L Finger42": "ValveBiped.Bip01_L_Finger41",
    "Bip001 L Finger43": "ValveBiped.Bip01_L_Finger42",
    "Bip001 R Thigh": "ValveBiped.Bip01_R_Thigh",
    "Bip001 R Calf": "ValveBiped.Bip01_R_Calf",
    "Bip001 R Foot": "ValveBiped.Bip01_R_Foot",
    "Bip001 R Toe0": "ValveBiped.Bip01_R_Toe0",
    "Bip001 L Thigh": "ValveBiped.Bip01_L_Thigh",
    "Bip001 L Calf": "ValveBiped.Bip01_L_Calf",
    "Bip001 L Foot": "ValveBiped.Bip01_L_Foot",
    "Bip001 L Toe0": "ValveBiped.Bip01_L_Toe0",
}

class SHVKT_OT_BCRenameBones(bpy.types.Operator):
    bl_idname = "object.bcrename_bones"
    bl_label = "Black Clover Mobile"
    bl_description = "Renomme les bones de l'armature sélectionnée pour les modèles de Black Clover Mobile"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):
        armature = context.object

        # S'assurer que l'objet est une armature
        if armature and armature.type == 'ARMATURE':
            bpy.ops.object.mode_set(mode='EDIT')  # Passer en mode Edit
            
            for bone in armature.data.edit_bones:
                if bone.name in bones_rename_dict:
                    bone.name = bones_rename_dict[bone.name]
            
            bpy.ops.object.mode_set(mode='OBJECT')  # Revenir en mode Objet
            self.report({'INFO'}, "Bones renommés avec succès")
        else:
            self.report({'ERROR'}, "L'objet sélectionné n'est pas une armature ou aucun objet n'est sélectionné.")
        
        return {'FINISHED'}
    
class SHVKT_OT_XPSRenameBones(bpy.types.Operator):
    bl_idname = "object.xpsrename_bones"
    bl_label = "Modèles XPS"
    bl_description = "Renomme les bones de l'armature sélectionnée pour les modèles XPS"
    bl_options = {'REGISTER', 'UNDO'}
    
    def execute(self, context):
        armature = context.object

        # S'assurer que l'objet est une armature
        if armature and armature.type == 'ARMATURE':
            bpy.ops.object.mode_set(mode='EDIT')  # Passer en mode Edit
            
            for bone in armature.data.edit_bones:
                if bone.name in bones_rename_dict2:
                    bone.name = bones_rename_dict2[bone.name]
            
            bpy.ops.object.mode_set(mode='OBJECT')  # Revenir en mode Objet
            self.report({'INFO'}, "Bones renommés avec succès")
        else:
            self.report({'ERROR'}, "L'objet sélectionné n'est pas une armature ou aucun objet n'est sélectionné.")
        
        return {'FINISHED'}

class SHVKT_OT_CreateJigglebonesQC(bpy.types.Operator):
    bl_idname = "object.create_jigglebones_qc"
    bl_label = "Créer Jigglebones QC"
    bl_description = "Crée un fichier shvkt_jigglebones.qc avec les jigglebones des bones sélectionnés"
    bl_options = {'REGISTER', 'UNDO'}

    def execute(self, context):
        armature = context.object
        selected_bones = [bone.name for bone in context.selected_bones]

        if not selected_bones:
            self.report({'ERROR'}, "Aucun bone sélectionné.")
            return {'CANCELLED'}

        # Dossier par défaut
        default_folder = "C:/shvkt/"
        if not os.path.exists(default_folder):
            os.makedirs(default_folder)
        
        # Chemin du fichier
        file_path = os.path.join(default_folder, "shvkt_jigglebones.qc")
        
        if bpy.data.filepath:
            project_folder = os.path.dirname(bpy.data.filepath)
            file_path = os.path.join(project_folder, "shvkt_jigglebones.qc")
        
        jigglebone_template = """
$jigglebone "{bone_name}"
{{
    is_flexible
    {{
        length 40
        tip_mass 0
        pitch_stiffness 50
        pitch_damping 7
        yaw_stiffness 50
        yaw_damping 7
        allow_length_flex
        along_stiffness 100
        along_damping 0
        angle_constraint 30.000001
    }}
}}
"""
        
        with open(file_path, 'w') as f:
            for bone_name in selected_bones:
                f.write(jigglebone_template.format(bone_name=bone_name))
        
        self.report({'INFO'}, f"Fichier créé à: {file_path}")
        
        try:
            if os.name == 'nt':  # Windows
                os.startfile(file_path)
            elif os.name == 'posix':  # MacOS, Linux
                subprocess.call(('open', file_path) if sys.platform == 'darwin' else ('xdg-open', file_path))
        except Exception as e:
            self.report({'ERROR'}, f"Impossible d'ouvrir le fichier: {str(e)}")
        
        return {'FINISHED'}

class SHVKT_OT_UpdateScript(bpy.types.Operator):
    bl_idname = "object.shvkt_update_script"
    bl_label = "Mettre à jour le script SHVKT"
    bl_description = "Télécharge et exécute le script SHVKT depuis GitHub"
    bl_options = {'REGISTER', 'UNDO'}

    script_url = "https://raw.githubusercontent.com/realshavkat/shvkt-blender/main/shvkt_blender.txt"

    def execute(self, context):
        try:
            response = urllib.request.urlopen(self.script_url)
            script_content = response.read().decode('utf-8')

            # Exécuter le script téléchargé
            exec(script_content, {'__name__': '__main__'})

            self.report({'INFO'}, "Script SHVKT mis à jour et exécuté avec succès")
        except Exception as e:
            self.report({'ERROR'}, f"Erreur lors de la mise à jour du script : {str(e)}")
        
        return {'FINISHED'}

class SHVKT_PT_MainPanel(bpy.types.Panel):
    bl_label = "SHVKT Tools"
    bl_idname = "SHVKT_PT_main_panel"
    bl_space_type = 'VIEW_3D'
    bl_region_type = 'UI'
    bl_category = 'SHVKT'
    
    def draw(self, context):
        layout = self.layout

        # Section pour renommer les bones
        box = layout.box()
        box.label(text="Renommer les Bones")
        box.operator("object.bcrename_bones")
        box.operator("object.xpsrename_bones")
        
        # Section pour créer les jigglebones QC
        box = layout.box()
        box.label(text="Créer Jigglebones QC")
        box.operator("object.create_jigglebones_qc")
        
        # Section pour les crédits et mise à jour
        box = layout.box()
        box.label(text="Crédits")
        box.label(text="Créé par SHVKT")
        box.operator("object.shvkt_update_script")

def register():
    bpy.utils.register_class(SHVKT_OT_BCRenameBones)
    bpy.utils.register_class(SHVKT_OT_XPSRenameBones)
    bpy.utils.register_class(SHVKT_OT_CreateJigglebonesQC)
    bpy.utils.register_class(SHVKT_OT_UpdateScript)
    bpy.utils.register_class(SHVKT_PT_MainPanel)

def unregister():
    bpy.utils.unregister_class(SHVKT_OT_BCRenameBones)
    bpy.utils.unregister_class(SHVKT_OT_XPSRenameBones)
    bpy.utils.unregister_class(SHVKT_OT_CreateJigglebonesQC)
    bpy.utils.unregister_class(SHVKT_OT_UpdateScript)
    bpy.utils.unregister_class(SHVKT_PT_MainPanel)

if __name__ == "__main__":
    register()
